/*
* The Tribonacci sequence Tn is defined as follows: 
* T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.
* Given n, return the value of Tn.
*
* Example 1:
* 
* Input: n = 4
* Output: 4
* Explanation:
* T_3 = 0 + 1 + 1 = 2
* T_4 = 1 + 1 + 2 = 4
* Example 2:
* 
* Input: n = 25
* Output: 1389537
* 
* Constraints:
*
* 0 <= n <= 37
* The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.
*/

fun tribonacci(n: Int): Int {

  var runningSum = 0

  // Create an array we use for dynamic programming
  // Start it off with the base case values
  // n <= 38 as part of the question constraints
  val dp = IntArray(38)
  dp[0] = 0
  dp[1] = 1
  dp[2] = 1 

  // Base Case
  if(n == 0){
      return 0
  }

  // Base Case
  if(n == 1 || n == 2){
      return 1
  }

  for(i in 3..n){
      runningSum = dp[i-3] + dp[i-2] + dp[i-1]
      dp[i] = runningSum
  }

  return runningSum
}
